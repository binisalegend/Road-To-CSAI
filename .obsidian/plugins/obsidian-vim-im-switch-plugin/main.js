/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var child_process = require('child_process');
var util = require('util');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const DEFAULT_SETTINGS = {
    fcitxRemotePath_macOS: '/usr/local/bin/fcitx-remote',
    fcitxRemotePath_windows: 'C:\\Program Files\\bin\\fcitx-remote',
    fcitxRemotePath_linux: '/usr/bin/fcitx-remote',
    IMSwitch_when_insert_mode: true,
    IMSwitch_developer_logging: false,
};
const pexec = util.promisify(child_process.exec);
var IMStatus;
(function (IMStatus) {
    IMStatus["Unknown"] = "Unknown";
    IMStatus["Active"] = "Active";
    IMStatus["Inactive"] = "Inactive";
})(IMStatus || (IMStatus = {}));
class VimIMSwitchPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.imStatus = IMStatus.Unknown;
        this.fcitxRemotePath = "";
        this.initialized = false;
        this.cmEditor = null;
        this.onVimModeChange = (cm) => __awaiter(this, void 0, void 0, function* () {
            // this.debug_log("Vim Input Method Switch: Vim mode change to : " + cm.mode);
            if (cm.mode == "normal" || cm.mode == "visual") {
                yield this.getFcitxRemoteStatus();
                if (this.imStatus == IMStatus.Active) {
                    yield this.deactivateIM();
                }
            }
            else if (cm.mode == "insert" || cm.mode == "replace") {
                if (this.imStatus == IMStatus.Inactive && this.settings.IMSwitch_when_insert_mode == true) {
                    yield this.activateIM();
                }
            }
        });
    }
    debug_log(content) {
        var _a;
        if ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.IMSwitch_developer_logging) {
            console.log(content);
        }
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Vim Input Method Switch: loading plugin');
            yield this.loadSettings();
            // this.addStatusBarItem().setText('Vim IM Switch Enabled');
            this.addSettingTab(new IMSwitchSettingTab(this.app, this));
            this.app.workspace.on('quit', () => __awaiter(this, void 0, void 0, function* () {
                yield this.deactivateIM();
            }));
            this.app.workspace.on('file-open', (file) => __awaiter(this, void 0, void 0, function* () {
                this.debug_log("Vim Input Method Switch: file-open");
                if (!this.initialized && file)
                    yield this.initialize();
                // {mode: string, ?subMode: string} object. Modes: "insert", "normal", "replace", "visual". Visual sub-modes: "linewise", "blockwise"}
                if (this.cmEditor) {
                    // default is normal mode, try to deactivate the IM.
                    yield this.deactivateIM();
                    if (this.imStatus == IMStatus.Unknown) {
                        yield this.getFcitxRemoteStatus();
                    }
                    this.cmEditor.off("vim-mode-change", this.onVimModeChange);
                    this.cmEditor.on("vim-mode-change", this.onVimModeChange);
                }
            }));
            // Used when we open a new markdown view by "split vertically",
            // which will not trigger 'file-open' event on obsidian v0.15.6
            this.app.workspace.on('active-leaf-change', (leaf) => __awaiter(this, void 0, void 0, function* () {
                this.debug_log("Vim Input Method Switch: active-leaf-change");
                if (this.app.workspace.activeLeaf.view.getViewType() == "markdown") {
                    this.debug_log("Vim Input Method Switch: focus on markdown view");
                    if (!this.initialized)
                        yield this.initialize();
                    // {mode: string, ?subMode: string} object. Modes: "insert", "normal", "replace", "visual". Visual sub-modes: "linewise", "blockwise"}
                    if (this.cmEditor) {
                        // default is normal mode, try to deactivate the IM.
                        yield this.deactivateIM();
                        if (this.imStatus == IMStatus.Unknown) {
                            yield this.getFcitxRemoteStatus();
                        }
                        this.cmEditor.off("vim-mode-change", this.onVimModeChange);
                        this.cmEditor.on("vim-mode-change", this.onVimModeChange);
                    }
                }
            }));
        });
    }
    initialize() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.initialized) {
                return;
            }
            this.debug_log("Vim Input Method Switch: initializing");
            // For CM6 this actually returns an instance of the object named CodeMirror from cm_adapter of codemirror_vim
            const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            this.cmEditor = (_c = (_b = (_a = view.sourceMode) === null || _a === void 0 ? void 0 : _a.cmEditor) === null || _b === void 0 ? void 0 : _b.cm) === null || _c === void 0 ? void 0 : _c.cm;
        });
    }
    runCmd(cmd, args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield pexec(`${cmd} ${args.join(" ")}`);
            return output.stdout || output.stderr;
        });
    }
    getFcitxRemoteStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fcitxRemotePath == "") {
                this.debug_log("Vim Input Method Switch: cannot get fcitx-remote path, please set it correctly.");
                return;
            }
            let fcitxRemoteOutput = yield this.runCmd(this.fcitxRemotePath);
            fcitxRemoteOutput = fcitxRemoteOutput.trimRight();
            if (fcitxRemoteOutput == "1") {
                this.imStatus = IMStatus.Inactive;
            }
            else if (fcitxRemoteOutput == "2") {
                this.imStatus = IMStatus.Active;
            }
            else {
                this.imStatus = IMStatus.Unknown;
            }
            this.debug_log("Vim Input Method Switch: input method status: " + this.imStatus.toString());
        });
    }
    activateIM() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fcitxRemotePath == "") {
                this.debug_log("Vim Input Method Switch: cannot get fcitx-remote path, please set it correctly.");
                return;
            }
            const output = yield this.runCmd(this.fcitxRemotePath, ["-o"]);
            this.debug_log("Vim Input Method Switch: activate input method: " + output);
            if (/Changing to/gi.test(output) && process.platform == "darwin") { // https://github.com/xcodebuild/fcitx-remote-for-osx/blob/master/fcitx-remote/main.m#L95
                this.imStatus = IMStatus.Inactive;
                this.debug_log("Vim Input Method Switch: input method status: " + this.imStatus.toString());
            }
        });
    }
    deactivateIM() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fcitxRemotePath == "") {
                this.debug_log("Vim Input Method Switch: cannot get fcitx-remote path, please set it correctly.");
                return;
            }
            const output = yield this.runCmd(this.fcitxRemotePath, ["-c"]);
            this.debug_log("Vim Input Method Switch: deactivate input method: " + output);
            if (/Changing to/gi.test(output) && process.platform == "darwin") { // https://github.com/xcodebuild/fcitx-remote-for-osx/blob/master/fcitx-remote/main.m#L95
                this.imStatus = IMStatus.Inactive;
                this.debug_log("Vim Input Method Switch: input method status: " + this.imStatus.toString());
            }
        });
    }
    onunload() {
        if (this.cmEditor) {
            this.cmEditor.off("vim-mode-change", this.onVimModeChange);
        }
        this.debug_log('Vim Input Method Switch: unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.updateCurrentPath();
        });
    }
    updateCurrentPath() {
        return __awaiter(this, void 0, void 0, function* () {
            switch (process.platform) {
                case 'darwin':
                    this.fcitxRemotePath = this.settings.fcitxRemotePath_macOS;
                    break;
                case 'linux':
                    this.fcitxRemotePath = this.settings.fcitxRemotePath_linux;
                    break;
                case 'win32':
                    this.fcitxRemotePath = this.settings.fcitxRemotePath_windows;
                    break;
                default:
                    console.log('Vim Input Method Switch: does not support ' + process.platform + ' currently.');
                    break;
            }
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class IMSwitchSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Vim IM Switch plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Fcitx Remote Path for macOS')
            .setDesc('The absolute path to fcitx-remote bin file on macOS.')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.fcitxRemotePath_macOS)
            .setValue(this.plugin.settings.fcitxRemotePath_macOS)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fcitxRemotePath_macOS = value;
            this.plugin.updateCurrentPath();
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Fcitx Remote Path for Linux')
            .setDesc('The absolute path to fcitx-remote bin file on Linux.')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.fcitxRemotePath_linux)
            .setValue(this.plugin.settings.fcitxRemotePath_linux)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fcitxRemotePath_linux = value;
            this.plugin.updateCurrentPath();
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Fcitx Remote Path for Windows')
            .setDesc('The absolute path to fcitx-remote bin file on Windows.')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.fcitxRemotePath_windows)
            .setValue(this.plugin.settings.fcitxRemotePath_windows)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fcitxRemotePath_windows = value;
            this.plugin.updateCurrentPath();
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Auto switch input method when entering insert or replace mode')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.IMSwitch_when_insert_mode)
            .onChange((value) => {
            this.plugin.settings.IMSwitch_when_insert_mode = value;
            this.plugin.updateCurrentPath();
            this.plugin.saveSettings();
        }));
        new obsidian.Setting(containerEl)
            .setName('Toggle developer logging')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.IMSwitch_developer_logging)
            .onChange((value) => {
            this.plugin.settings.IMSwitch_developer_logging = value;
            this.plugin.updateCurrentPath();
            this.plugin.saveSettings();
        }));
    }
}

module.exports = VimIMSwitchPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
