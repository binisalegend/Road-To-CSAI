/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimImSwitcher
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var DEFAULT_SETTINGS = {
  macos: {
    pathToIMControl: "/opt/homebrew/bin",
    cmdOnInsertLeave: "im-select com.apple.keylayout.ABC",
    cmdOnInsertEnter: "im-select {{im}}",
    cmdGetCurrentIM: "im-select"
  },
  windows: {
    pathToIMControl: "%USERPROFILE%\\AppData\\Local\\bin",
    cmdOnInsertLeave: "im-select.exe 1033",
    cmdOnInsertEnter: "im-select.exe {{im}}",
    cmdGetCurrentIM: "im-select.exe"
  },
  linux: {
    pathToIMControl: "/usr/bin",
    cmdOnInsertLeave: "fcitx5-remote -c",
    cmdOnInsertEnter: "fcitx5-remote -o",
    cmdGetCurrentIM: "fcitx5-remote"
  },
  isAsync: true,
  isStatusBarEnabled: false
};
var VimImSwitcher = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // internal state for the plugin
    this.isInitialized = false;
    this.imToRestore = "";
    this.prevVimMode = "normal";
    this.editorSet = /* @__PURE__ */ new WeakSet();
    this.registerWorkspaceEvent = async () => {
      if (!this.isInitialized) {
        await this.initialize();
      }
      this.registerVimModeChangeEvent();
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new VimImSwitcherSettingTab(this.app, this));
    this.statusBarItemEl = this.addStatusBarItem();
    this.statusBarItemEl.setText("");
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", this.registerWorkspaceEvent)
    );
    this.registerEvent(
      this.app.workspace.on("file-open", this.registerWorkspaceEvent)
    );
  }
  async initialize() {
    if (this.isInitialized) {
      this.logWarn("plugin already initialized");
      return;
    }
    console.debug(`plugin init start (platform = ${process.platform})`);
    switch (process.platform) {
      case "win32":
        this.setting = this.settings.windows;
        break;
      case "darwin":
        this.setting = this.settings.macos;
        break;
      case "linux":
        this.setting = this.settings.linux;
        break;
      default:
        this.logError("unsupported platform");
        break;
    }
    this.updateEnvironmentVariableForProcess();
    this.statusBarItemEl.setText("");
    this.imToRestore = "";
    this.prevVimMode = "normal";
    this.isInitialized = true;
  }
  updateEnvironmentVariableForProcess() {
    const delimiter = process.platform === "win32" ? ";" : ":";
    process.env.PATH = `${process.env.PATH}${delimiter}${this.setting.pathToIMControl}`;
    console.debug(`current process PATH updated: ${process.env.PATH}`);
  }
  registerVimModeChangeEvent() {
    const view = this.getActiveMarkdownView();
    if (!view) {
      return;
    }
    const editor = this.getCodeMirrorEditor(view);
    if (!editor) {
      return;
    }
    if (this.editorSet.has(editor)) {
      return;
    }
    editor.on("vim-mode-change", (modeObj) => {
      if (modeObj) {
        this.onVimModeChanged(modeObj);
      }
    });
    this.editorSet.add(editor);
    console.debug("vim-mode-change event registered");
  }
  getActiveMarkdownView() {
    return this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  }
  getCodeMirrorEditor(view) {
    var _a, _b, _c;
    return (_c = (_b = (_a = view.sourceMode) == null ? void 0 : _a.cmEditor) == null ? void 0 : _b.cm) == null ? void 0 : _c.cm;
  }
  onVimModeChanged(modeObj) {
    switch (modeObj.mode) {
      case "insert":
        this.onInsertEnter();
        break;
      default:
        if (this.prevVimMode != "insert") {
          break;
        }
        if (this.settings.isAsync) {
          this.onInsertLeaveAsync();
        } else {
          this.onInsertLeaveSync();
        }
        break;
    }
    this.prevVimMode = modeObj.mode;
  }
  isOnInsertEnterEnabled() {
    return !!this.setting.cmdOnInsertEnter && !!this.setting.cmdGetCurrentIM;
  }
  isOnInsertLeaveEnabled() {
    return !!this.setting.cmdOnInsertLeave;
  }
  onInsertEnter() {
    if (!this.isOnInsertEnterEnabled()) {
      console.debug("onInsertEnter is disabled: skip");
      return;
    }
    const enableCommand = this.setting.cmdOnInsertEnter.replace(
      /{{im}}/,
      this.imToRestore
    );
    if (this.settings.isAsync) {
      this.runCommandAsync(enableCommand).then((stdout) => {
        console.debug(`im switched to ${stdout} by ${enableCommand}`);
      });
    } else {
      const stdout = this.runCommandSync(enableCommand);
      console.debug(`im switched to ${stdout} by ${enableCommand}`);
    }
  }
  onInsertLeaveAsync() {
    if (!this.isOnInsertLeaveEnabled()) {
      console.debug("onInsertLeave is disabled: skip");
      return;
    }
    console.debug("run onInsertLeaveAsync");
    if (this.isOnInsertEnterEnabled()) {
      this.runCommandAsync(this.setting.cmdGetCurrentIM).then((stdout) => {
        this.imToRestore = stdout;
        console.debug(`im cached: ${this.imToRestore}`);
        this.runCommandAsync(this.setting.cmdOnInsertLeave).then(
          (_stdout) => {
            console.debug(`im switched by ${this.setting.cmdOnInsertLeave}`);
          }
        );
      });
    } else {
      this.runCommandAsync(this.setting.cmdOnInsertLeave).then(
        (_stdout) => {
          console.debug(`im switched by ${this.setting.cmdOnInsertLeave}`);
        }
      );
    }
  }
  onInsertLeaveSync() {
    if (!this.isOnInsertLeaveEnabled()) {
      console.debug("onInsertLeave is disabled: skip");
      return;
    }
    console.debug("run onInsertLeaveSync");
    if (this.isOnInsertEnterEnabled()) {
      this.imToRestore = this.runCommandSync(this.setting.cmdGetCurrentIM);
      console.debug(`im cached: ${this.imToRestore}`);
    }
    this.runCommandSync(this.setting.cmdOnInsertLeave);
    console.debug(`im switched by ${this.setting.cmdOnInsertLeave}`);
  }
  runCommandAsync(command) {
    return new Promise((resolve, reject) => {
      (0, import_child_process.exec)(command, (error, stdout, stderr) => {
        if (error) {
          this.logError(
            `command failed with error: ${error}, stdout: ${stdout}, stderr: ${stderr}`
          );
          reject(error);
          return;
        }
        resolve(stdout);
      });
    });
  }
  runCommandSync(command) {
    try {
      const stdout = (0, import_child_process.execSync)(command, { encoding: "utf-8" });
      return stdout;
    } catch (error) {
      this.logError(`command failed with error: ${error}`);
      return "";
    }
  }
  logWarn(msg) {
    console.warn(msg);
    if (this.settings.isStatusBarEnabled) {
      this.statusBarItemEl.setText(`WARN: ${msg}`);
    }
  }
  logError(msg) {
    console.error(msg);
    if (this.settings.isStatusBarEnabled) {
      this.statusBarItemEl.setText(`ERROR: ${msg}`);
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var VimImSwitcherSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setDesc(
      "You can set the following four settings for each platform. 			If you want to use the `InsertEnter` command, 			you should also set the `Get Current IM` command to restore the state of IM. 			If you leave blank either of them, `InsertEnter` will be skipped."
    );
    containerEl.createEl("h3", { text: "macOS" });
    this.createSettingForOS(
      containerEl,
      this.plugin.settings.macos,
      DEFAULT_SETTINGS.macos
    );
    containerEl.createEl("h3", { text: "Windows" });
    this.createSettingForOS(
      containerEl,
      this.plugin.settings.windows,
      DEFAULT_SETTINGS.windows
    );
    containerEl.createEl("h3", { text: "Linux" });
    new import_obsidian.Setting(containerEl).setDesc(
      "WARN: This plugin doesn't work with Obsidian installed from Snap or Flatpak. 			Please try `AppImage` or `deb` file. 			If you want to use `ibus` or `fcitx-remote`, please refere README on GitHub repo."
    );
    this.createSettingForOS(
      containerEl,
      this.plugin.settings.linux,
      DEFAULT_SETTINGS.linux
    );
    containerEl.createEl("h3", { text: "Common" });
    new import_obsidian.Setting(containerEl).setName("Async switch").setDesc("Whether to switch IM asynchronously or not").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.isAsync);
      toggle.onChange(async (value) => {
        console.debug(`Async Switch: ${value}`);
        this.plugin.settings.isAsync = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Status bar message").setDesc("Whether to show ERROR/WARN messages on Status Bar").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.isStatusBarEnabled);
      toggle.onChange(async (value) => {
        console.debug(`Status Bar Message: ${value}`);
        this.plugin.settings.isStatusBarEnabled = value;
        await this.plugin.saveSettings();
      });
    });
  }
  createSettingForOS(containerEl, setting, defaults) {
    new import_obsidian.Setting(containerEl).setName("PATH to IM Controller").setDesc("PATH to IM Controller used only in the internal process").addText(
      (text) => text.setPlaceholder(defaults.pathToIMControl).setValue(setting.pathToIMControl).onChange(async (value) => {
        console.debug(`PATH to IM Controller: ${value}`);
        setting.pathToIMControl = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Get Current IM").setDesc("The command to get current IM").addText(
      (text) => text.setPlaceholder(defaults.cmdGetCurrentIM).setValue(setting.cmdGetCurrentIM).onChange(async (value) => {
        console.debug("Get Current IM: " + value);
        setting.cmdGetCurrentIM = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("On InsertEnter").setDesc(
      "The command when entering insert mode (Use {{im}} as placeholder of cached IM)"
    ).addText(
      (text) => text.setPlaceholder(defaults.cmdOnInsertEnter).setValue(setting.cmdOnInsertEnter).onChange(async (value) => {
        console.debug("On InsertEnter: " + value);
        setting.cmdOnInsertEnter = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("On InsertLeave").setDesc("The command when leaving insert mode").addText(
      (text) => text.setPlaceholder(defaults.cmdOnInsertLeave).setValue(setting.cmdOnInsertLeave).onChange(async (value) => {
        console.debug("On InsertLeave: " + value);
        setting.cmdOnInsertLeave = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
